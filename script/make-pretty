#!/bin/bash
#
#  Copyright (c) 2019, The OpenThread Authors.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#  3. Neither the name of the copyright holder nor the
#     names of its contributors may be used to endorse or promote products
#     derived from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#

#
# The script to check or format source code of OpenThread.
#
# Format c/c++, markdown, python, and shell:
#
#     script/make-pretty
#
# Format c/c++ only:
#
#     script/make-pretty clang-format
#
# Format markdown only:
#
#     script/make-pretty markdown
#
# Format python only:
#
#     script/make-pretty python
#
# Format shell only:
#
#     script/make-pretty shell
#
# Check only:
#
#     script/make-pretty check clang-format
#     script/make-pretty check markdown
#     script/make-pretty check python
#     script/make-pretty check shell
#

set -euo pipefail

# ==============================================================================
# Bash definitions

if [[ -n ${BASH_SOURCE[0]} ]]; then
    script_path="${BASH_SOURCE[0]}"
else
    script_path="$0"
fi
script_dir="$(realpath "$(dirname "${script_path}")")"
repo_dir="$(dirname "${script_dir}")"

BUILD_JOBS=$(nproc -c)
readonly BUILD_JOBS
OT_EXCLUDE_DIRS=(
    api
    apps
    deps
    images
    include
    messaging
    port/linux
    port/windows
    port/unittest
    port/*.h
    port/*.c
    security
    signatures
    tests
    tools
    util
    LICENSE.md
)
readonly OT_EXCLUDE_DIRS

OT_CLANG_SOURCES=('*.c' '*.cc' '*.cpp' '*.h' '*.hpp')
readonly OT_CLANG_SOURCES

OT_MARKDOWN_SOURCES=('*.md')
readonly OT_MARKDOWN_SOURCES

OT_PYTHON_SOURCES=('*.py')
readonly OT_PYTHON_SOURCES

CLANG_FORMAT_STYLE_FILE="${repo_dir}/deps/ot-efr32/.clang-format"
export CLANG_FORMAT_STYLE_FILE

get_files_to_format()
{
    local file_patterns
    file_patterns=("$@")
    local files_to_format

    local git_ls_files
    git_ls_files=$(git ls-files "${file_patterns[@]}")
    for file in $(echo "${git_ls_files}" | grep -v -E "^($(echo "${OT_EXCLUDE_DIRS[@]}" | tr ' ' '|'))"); do
        files_to_format+=("${file}")
    done

    echo "${files_to_format[@]}"
}

do_clang_format()
{
    echo -e '========================================'
    echo -e '     format c/c++ (clang-format)'
    echo -e '========================================'
    pushd "${repo_dir}"

    local files_to_format=()
    while IFS='' read -r line; do files_to_format+=("$line"); done < <(get_files_to_format "${OT_CLANG_SOURCES[@]}")

    if [ ${#files_to_format[@]} -eq 0 ]; then
        echo "No clang files to format."
    else
        echo "${files_to_format[@]}" | xargs -t -n1 -P"$BUILD_JOBS" \
            "${repo_dir}"/script/clang-format -style=file:"${CLANG_FORMAT_STYLE_FILE}" -i -verbose
    fi

    popd
}

do_clang_format_check()
{
    echo -e '========================================'
    echo -e '     check c/c++ (clang-format)'
    echo -e '========================================'
    pushd "${repo_dir}"

    local files_to_format=()
    while IFS='' read -r line; do files_to_format+=("$line"); done < <(get_files_to_format "${OT_CLANG_SOURCES[@]}")

    if [ ${#files_to_format[@]} -eq 0 ]; then
        echo "No clang files to check."
    else
        echo "${files_to_format[@]}" | xargs -t -n1 -P"$BUILD_JOBS" \
            "${repo_dir}"/script/clang-format-check
    fi

    popd
}

do_markdown_format()
{
    echo -e '========================================'
    echo -e '     format markdown'
    echo -e '========================================'
    pushd "${repo_dir}"

    local files_to_format=()
    while IFS='' read -r line; do files_to_format+=("$line"); done < <(get_files_to_format "${OT_MARKDOWN_SOURCES[@]}")

    if [ ${#files_to_format[@]} -eq 0 ]; then
        echo "No markdown files to format."
    else
        echo "${files_to_format[@]}" | xargs -t -n1 -P"$BUILD_JOBS" \
            npx prettier@2.0.4 --write
    fi

    popd
}

do_markdown_check()
{
    echo -e '========================================'
    echo -e '     check markdown'
    echo -e '========================================'
    pushd "${repo_dir}"

    local files_to_format=()
    while IFS='' read -r line; do files_to_format+=("$line"); done < <(get_files_to_format "${OT_MARKDOWN_SOURCES[@]}")

    if [ ${#files_to_format[@]} -eq 0 ]; then
        echo "No markdown files to check."
    else
        echo "${files_to_format[@]}" | xargs -t -n1 -P"$BUILD_JOBS" \
            npx prettier@2.0.4 --check
    fi

    popd
}

do_python_format()
{
    echo -e '========================================'
    echo -e '     format python'
    echo -e '========================================'
    pushd "${repo_dir}"

    local files_to_format=()
    while IFS='' read -r line; do files_to_format+=("$line"); done < <(get_files_to_format "${OT_PYTHON_SOURCES[@]}")

    if [ ${#files_to_format[@]} -eq 0 ]; then
        echo "No python files to format."
    else
        echo "${files_to_format[@]}" | xargs -t -n1 -P"$BUILD_JOBS" \
            python3 -m yapf --verbose --style '{based_on_style: google, column_limit: 119}' -ipr
    fi

    popd
}

do_python_check()
{
    echo -e '========================================'
    echo -e '     check python'
    echo -e '========================================'
    pushd "${repo_dir}"

    local files_to_format=()
    while IFS='' read -r line; do files_to_format+=("$line"); done < <(get_files_to_format "${OT_PYTHON_SOURCES[@]}")

    if [ ${#files_to_format[@]} -eq 0 ]; then
        echo "No python files to check."
    else
        echo "${files_to_format[@]}" | xargs -t -n1 -P"$BUILD_JOBS" \
            python3 -m yapf --verbose --style '{based_on_style: google, column_limit: 119}' -dpr
    fi

    popd
}

do_shell_format()
{
    echo -e '========================================'
    echo -e '     format shell'
    echo -e '========================================'
    pushd "${repo_dir}"

    local files_to_format=()
    while IFS='' read -r line; do files_to_format+=("$line"); done < <(git ls-files | xargs shfmt -f | grep -v -E "^($(echo "${OT_EXCLUDE_DIRS[@]}" | tr ' ' '|'))")

    if [ ${#files_to_format[@]} -eq 0 ]; then
        echo "No shell files to format."
    else
        echo "${files_to_format[@]}" | xargs -t -n1 -P"$BUILD_JOBS" \
            shfmt -i 4 -bn -ci -fn -s -w
    fi

    popd
}

do_shell_check()
{
    echo -e '========================================'
    echo -e '     check shell'
    echo -e '========================================'
    pushd "${repo_dir}"

    local files_to_format=()
    while IFS='' read -r line; do files_to_format+=("$line"); done < <(git ls-files | xargs shfmt -f | grep -v -E "^($(echo "${OT_EXCLUDE_DIRS[@]}" | tr ' ' '|'))")

    if [ ${#files_to_format[@]} -eq 0 ]; then
        echo "No shell files to check."
    else
        echo "${files_to_format[@]}" | xargs -t -n1 -P"$BUILD_JOBS" \
            shfmt -i 4 -bn -ci -fn -s -d
            shellcheck -x --source-path="${repo_dir}" "${files_to_format[@]}"
    fi

    popd
}

do_check()
{
    if [ $# == 0 ]; then
        do_clang_format_check
        do_markdown_check
        do_python_check
        do_shell_check
    elif [ "$1" == 'clang' ]; then
        do_clang_format_check
    elif [ "$1" == 'clang-format' ]; then
        do_clang_format_check
    elif [ "$1" == 'markdown' ]; then
        do_markdown_check
    elif [ "$1" == 'python' ]; then
        do_python_check
    elif [ "$1" == 'shell' ]; then
        do_shell_check
    else
        echo >&2 "Unsupported check: $1. Supported: clang, markdown, python, shell"
        # 128 for Invalid arguments
        exit 128
    fi
}

main()
{
    if [ $# == 0 ]; then
        do_clang_format
        do_markdown_format
        do_python_format
        do_shell_format
    elif [ "$1" == 'clang' ]; then
        do_clang_format
    elif [ "$1" == 'clang-format' ]; then
        do_clang_format
    elif [ "$1" == 'markdown' ]; then
        do_markdown_format
    elif [ "$1" == 'python' ]; then
        do_python_format
    elif [ "$1" == 'shell' ]; then
        do_shell_format
    elif [ "$1" == 'check' ]; then
        shift
        do_check "$@"
    else
        echo >&2 "Unsupported action: $1. Supported: clang, markdown, python, shell"
        # 128 for Invalid arguments
        exit 128
    fi

}

main "$@"
